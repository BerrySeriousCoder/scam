//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                           String            @id() @default(uuid())
  name                         String?
  email                        String?           @unique()
  pictureUrl                   String?           @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation              String?
  status                       UserStatus        @default(VERIFIED)
  globalRole                   String            @default("USER")
  /// @password
  /// @omit
  password                     String?
  createdAt                    DateTime          @default(now())
  updatedAt                    DateTime          @default(now()) @updatedAt()
  documents                    Document[]        @relation("user")
  jobMatchs                    JobMatch[]        @relation("user")
  linkedinProfiles             LinkedinProfile[] @relation("user")
  collaborations               Collaboration[]   @relation("user")
  collaborationsAsCollaborator Collaboration[]   @relation("collaborator")
  careerPaths                  CareerPath[]      @relation("user")
}

/// @@allow('all', true)
model Document {
  id             String          @id() @default(uuid())
  title          String?
  content        String?
  type           String?
  format         String?
  language       String?
  industryType   String?
  version        Float
  score          String?
  userId         String?
  user           User?           @relation(fields: [userId], references: [id], name: "user")
  templates      Template[]      @relation("document")
  jobMatchs      JobMatch[]      @relation("document")
  collaborations Collaboration[] @relation("document")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Template {
  id         String    @id() @default(uuid())
  name       String?
  type       String?
  content    String?
  isAts      Boolean
  documentId String?
  document   Document? @relation(fields: [documentId], references: [id], name: "document")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model JobMatch {
  id             String    @id() @default(uuid())
  jobTitle       String?
  jobDescription String?
  matchScore     String?
  status         String?
  userId         String?
  user           User?     @relation(fields: [userId], references: [id], name: "user")
  documentId     String?
  document       Document? @relation(fields: [documentId], references: [id], name: "document")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model LinkedinProfile {
  id           String   @id() @default(uuid())
  profileUrl   String?
  content      String?
  score        String?
  lastAnalysis String?
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Collaboration {
  id             String    @id() @default(uuid())
  permission     String?
  documentId     String?
  document       Document? @relation(fields: [documentId], references: [id], name: "document")
  userId         String?
  user           User?     @relation(fields: [userId], references: [id], name: "user")
  collaboratorId String?
  collaborator   User?     @relation(fields: [collaboratorId], references: [id], name: "collaborator")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CareerPath {
  id             String   @id() @default(uuid())
  currentRole    String?
  targetRole     String?
  requiredSkills String?
  progress       String?
  userId         String?
  user           User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt()
}
